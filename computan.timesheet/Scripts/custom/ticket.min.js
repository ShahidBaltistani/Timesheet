function initDocument() { initControls(), loadUsersTagInputs(), loadTeamsTagInputs() } function initControls() { $("#ticketprojectid").select2(), $("#ticketskillid").select2(), $("#StartDate").datepicker(), $("#EndDate").datepicker() } function loadUsersTagInputs() { var e = new Bloodhound({ datumTokenizer: Bloodhound.tokenizers.obj.whitespace("text"), queryTokenizer: Bloodhound.tokenizers.whitespace, limit: 10, prefetch: { url: "/tickets/PrefetchUsers", prepare: function (e) { return e.type = "POST", e.contentType = "application/json; charset=UTF-8", e }, remote: function (e, t) { return t.type = "POST", t.data = { q: e, foo: "bar" }, t } } }); e.initialize(), elt = $(".assignedusersinput"), elt.tagsinput({ itemValue: "value", itemText: "text" }), elt.tagsinput("input").typeahead(null, { name: "assignedusers", valueKey: "value", displayKey: "text", source: e.ttAdapter(), templates: "<p>{{text}}</p>" }).bind("typeahead:selected", $.proxy(function (e, t) { this.tagsinput("add", t), this.tagsinput("input").typeahead("val", "") }, elt)) } function loadTeamsTagInputs() { var e = new Bloodhound({ datumTokenizer: Bloodhound.tokenizers.obj.whitespace("text"), queryTokenizer: Bloodhound.tokenizers.whitespace, limit: 10, prefetch: { url: "/tickets/PrefetchTeams", prepare: function (e) { return e.type = "POST", e.contentType = "application/json; charset=UTF-8", e }, remote: function (e, t) { return t.type = "POST", t.data = { q: e, foo: "bar" }, t } } }); e.initialize(), elt = $(".assignedteaminput"), elt.tagsinput({ itemValue: "value", itemText: "text" }), elt.tagsinput("input").typeahead(null, { name: "assignedteams", valueKey: "value", displayKey: "text", source: e.ttAdapter(), templates: "<p>{{text}}</p>" }).bind("typeahead:selected", $.proxy(function (e, t) { this.tagsinput("add", t), this.tagsinput("input").typeahead("val", "") }, elt)) } function userClicked(e) { } jQuery(function () { initDocument(), jQuery(document).on("mouseover", ".changeticketstatus", function () { jQuery(this).closest("tr").find(".hideable").show() }); var e = $(".selticket"), t = null; e.click(function (s) { if (t) { if (s.shiftKey) { var a = e.index(this), i = e.index(t); e.slice(Math.min(a, i), Math.max(a, i) + 1).prop("checked", t.checked) } t = this } else t = this }), $("arrow-click").on("click", function () { $("arrow-click i").removeClass("fa-caret-right"), $("arrow-click i").addClass("fa-caret-down") }), jQuery(document).on("click", ".changeticketstatus", function () { var e = jQuery(this).data("statusid"), t = jQuery(this).closest("tr").prop("id"); return $(".usernotification").remove(), $.ajax({ url: "/tickets/chnageticketstatus/", data: { id: t, status: e }, type: "POST" }).done(function (e) { if (e.error) { var s = $("#error-notification-template").html(), a = Handlebars.compile(s)(e); return $("#maincontent").prepend(a), !1 } s = $("#success-notification-template").html(), a = Handlebars.compile(s)(e); $("#maincontent").prepend(a); var i = $("tr#" + t); i.animate({ backgroundColor: "yellow" }, 1e3).fadeOut(1e3, function () { i.remove() }) }), !1 }), jQuery(document).on("click", "#btnsearch", function () { var e = $(this).attr("data-statusid"), t = $("#searchtext").val(); return $("#searchvalue").val(t), $("#pagenumber").val(0), $.ajax({ url: "/tickets/SearchTickets", data: { searchstring: t, statusid: e, pagenum: 0 }, type: "GET" }).done(function (s) { $("#productList").html(s.tickets); $("#productList").find("tr").length; return $("#" + e + ".conversationstatus").html(s.totalcount), $(".presearchstring").removeClass("hidden"), $(".checkall").prop("checked", !1), t ? ($(".searchstring").html(" <b>' " + t + " '</b>"), $("#searchtext").val("")) : $(".presearchstring").addClass("hidden"), !1 }), !1 }), $(document).on("click", ".clearsearch", function () { if ("" != $("#searchvalue").val()) { var e = $("#TicketStatusId").val(); $("#pagenumber").val(0), $("#searchtext").val(""), $(".searchstring").html(""), $("#searchvalue").val(""), $(".checkall").prop("checked", !1), $(".presearchstring").addClass("hidden"), $("#pagenumber").val(0), $("#" + e + ".mytaskstatuslink").click() } return !1 }), jQuery(document).on("click", ".checkall", function () { var e = this.checked; jQuery("#productList").find("tr").each(function () { jQuery(this).hasClass("lf-hidden") || jQuery(this).find(".selticket:checkbox").prop("checked", e) }) }), jQuery(document).on("click", ".selticket", function () { this.checked ? $(".selticket").length == $(".selticket:checked").length && $(".checkall").prop("checked", !0) : $(".checkall").prop("checked", !1) }), jQuery(document).on("click", ".assignmultitickets", function () { var e = jQuery(".assignedusers").val(), t = jQuery(".assignedteams").val(), s = $("#projectid_assignuser").val(), a = $("#skillid_assignuser").val(); if ("" == s) return sweetAlert("Sorry", "Please select a project from the list.", "error"), !1; if ("" === a) return sweetAlert("Sorry", "Please select a skill from the list.", "error"), !1; var i = []; $(".selticket:checked").each(function () { i.push($(this).val()) }); var r = i.join(","); return $.ajax({ url: "/Tickets/AssignMultipleTickets/", data: { projectid: s, skillid: a, ticketcsv: r, usercsv: e, shiftteamID: t }, type: "POST" }).done(function (e) { if (e.error) { var t = $("#error-notification-template").html(), s = Handlebars.compile(t)(e); return $("#modelassignuseradmindiv").prepend(s), !1 } return $.each(e.tickets, function (e, t) { $("#" + t).animate({ backgroundColor: "yellow" }, 1e3).fadeOut(1e3, function () { $("#" + t).remove() }), $("input:checkbox").removeAttr("checked"), $("#searchtext").val(""); var s = $("#2.conversationstatus").text(); s = parseInt(s), s += 1, $("#2.conversationstatus").text(s); var a = $("#1.conversationstatus").text(); a = parseInt(a), a -= 1, $("#1.conversationstatus").text(a) }), new PNotify({ title: "Success", text: "The task has been assigned to selected users.", type: "success" }), $("#projectid_assignuser").val("").trigger("change"), $("#skillid_assignuser").val("").trigger("change"), $(".teammember:checked").prop("checked", !1), jQuery(".assignedusers").tagsinput("removeAll"), jQuery(".assignedteams").tagsinput("removeAll"), !1 }), $("#assignuserspopup").removeClass("assignmultitickets").addClass("saveticketassignment"), $("#assignuseradmin").find(".modal-title").html("Assign users"), $("#assignuseradmin").modal("toggle"), !1 }), jQuery(document).on("click", ".previewticket", function () { var e = $(this).data("id"); $.ajax({ url: "/ticketitems/loadconversation/" + e, data: "", type: "GET" }).done(function (e) { return !e.error && ($("#conversationmodelbodydiv").html(e), $("#modelemailbody a").attr("target", "_blank"), $("#uniquebodymodel").modal("show"), !1) }) }), jQuery(document).on("click", ".assignticket", function () { $("#btnassignticket").removeClass("assignmultitickets").addClass("saveticketassignment"), $(".shiftteammember").each(function () { $(this).prop("checked", !1) }), $(".teammember").each(function () { $(this).prop("checked", !1) }); var e = $(this).data("ticketid"), t = $(this).data("projectid"), s = $(this).data("skillid"); "" != t && $("#projectid_assignuser").val(t).trigger("change"), "" != s && $("#skillid_assignuser").val(s).trigger("change"), $("#assignticket_ticketid").val(e), $("#assignuseradmin").modal("toggle") }), jQuery(document).on("click", ".assignticketaction", function () { jQuery("#ticketprojectid").val("").trigger("change"), jQuery("#ticketskillid").val("").trigger("change"), jQuery("#estimateTimeInput").val("").trigger("change"), jQuery(".assignedusersinput").tagsinput("removeAll"), jQuery(".assignedteaminput").tagsinput("removeAll"), jQuery("#ticketcomment").val(""); var e = jQuery(this).data("ticketid"), t = jQuery(this).data("projectid"), s = jQuery(this).data("skillid"); jQuery("#AssignmentDialogTicketId").val(e), "" != t && jQuery("#ticketprojectid").val(t).trigger("change"), "" != s && jQuery("#ticketskillid").val(s).trigger("change"), $.ajax({ url: "/Tickets/FetchUsersAndTeams/", data: { Ticketid: e }, type: "GET" }).done(function (t) { if (1 == t.error) return sweetAlert("Sorry", t.TextContext, "error"), alert("test"), !1; null != t.Users && $(t.Users).each(function (e, t) { jQuery(".assignedusersinput").tagsinput("add", { value: t.Id, text: t.FullName }) }), null != t.Teams && $(t.Teams).each(function (e, t) { jQuery(".assignedteaminput").tagsinput("add", { value: t.id, text: t.name }) }), t.Ticketstatus > 1 && (jQuery("#ticketprojectid").val(t.projectId).trigger("change"), jQuery("#ticketskillid").val(t.skillId).trigger("change")), $.ajax({ url: "/Home/FetchEstimatetasktime/", data: { Ticketid: e }, type: "GET" }).done(function (e) { jQuery("#estimateTimeInput").val(e.estimatetime).trigger("change"), jQuery("#EstimateTimeHidden").val(e.estimatetime).trigger("change") }), jQuery(".tag").removeClass("label-info").addClass("label-success"), jQuery("#ticketAssignModal").modal("toggle") }) }), jQuery(document).on("click", ".assign-single-ticket", function () { var e = jQuery("#AssignmentDialogTicketId").val(), t = jQuery("#ticketprojectid").val(), s = jQuery("#ticketskillid").val(), a = jQuery(".assignedusersinput").val(), i = jQuery(".assignedteaminput").val(), r = jQuery("#ticketcomment").val(), n = jQuery("#StartDate").val(), c = jQuery("#EndDate").val(), o = e, l = jQuery("#estimateTimeInput").val(), u = jQuery("#EstimateTimeHidden").val(); return "" == t ? (sweetAlert("Sorry", "Please select a project from the list.", "error"), !1) : "" == s ? (sweetAlert("Sorry", "Please select a skill from the list.", "error"), !1) : "" == a && "" == i ? (sweetAlert("Sorry! Assignment Missing", "Please assign ticket to at least one user/team.", "error"), !1) : (l === u && (l = null), void $.ajax({ url: "/tickets/assigntickets/", data: { ticketcsv: o, projectid: t, skillid: s, StartDate: n, EndDate: c, usercsv: a, teamcsv: i, comment: r, EstimatedTime: l }, type: "POST" }).done(function (e) { return e.error ? (alert(e.errortext), !1) : ($.each(e.tickets, function (e, t) { var s = $("tr#" + t.toString()); s.animate({ backgroundColor: "yellow" }, 1e3).fadeOut(1e3, function () { $(s).remove() }); var a = $("#2.conversationstatus").text(); a = parseInt(a), a += 1, $("#2.conversationstatus").text(a); var i = $("#1.conversationstatus").text(); i = parseInt(i), i -= 1, $("#1.conversationstatus").text(i) }), new PNotify({ title: "Success", text: "The task has been assigned to selected users.", type: "success" }), jQuery("#ticketAssignModal").modal("hide"), !1) })) }), jQuery(document).on("click", ".saveticketassignment", function () { var e = $("#assignticket_ticketid").val(), t = $("#projectid_assignuser").val(), s = $("#skillid_assignuser").val(); if ("" == t) return sweetAlert("Sorry", "Please select a project from the list.", "error"), !1; if ("" == t || "" === s) return sweetAlert("Sorry", "Peasle select a skill from the list.", "error"), !1; if (0 == $(".teammember:checked").length && 0 == $(".shiftteammember:checked").length) return sweetAlert("Sorry", "Please select at least one team member to assign the ticket.", "error"), !1; var a = []; $(".shiftteammember:checked").each(function () { a.push($(this).data("teamid")) }); var i = a.join(","), r = []; $(".teammember:checked").each(function () { r.push($(this).data("userid")) }); var n = r.join(","); $.ajax({ url: "/Tickets/AssignTicket/", data: { ticketid: e, projectid: t, skillid: s, users: n, shiftteamID: i }, type: "POST" }).done(function (e) { if (e.error || 1 == e.error) { var t = $("#error-notification-template").html(), s = Handlebars.compile(t)(e); return $("#modelassignuseradmindiv").find(".alert").remove(), $("#modelassignuseradmindiv").prepend(s), !1 } $("#assignuseradmin").modal("toggle"), $("body").on("hidden.bs.modal", "#assignuseradmin", function () { $(this).removeData("bs.modal") }); var a = $("tr#" + e.ticketid.toString()); a.animate({ backgroundColor: "yellow" }, 1e3).fadeOut(1e3, function () { $(a).remove() }); var i = $("#2.conversationstatus").text(); i = parseInt(i), i += 1, $("#2.conversationstatus").text(i); var r = $("#1.conversationstatus").text(); return r = parseInt(r), r -= 1, $("#1.conversationstatus").text(r), new PNotify({ title: "Success", text: "The task has been assigned to selected users.", type: "success" }), $("#projectid_assignuser").val("").trigger("change"), $("#skillid_assignuser").val("").trigger("change"), $(".teammember:checked").prop("checked", !1), !1 }) }), jQuery(document).on("click", ".closeemultitask", function () { return 0 == $(".selticket:checked").length ? (new PNotify({ title: "Warning!", text: "Please select at least one ticket to close", type: "warning" }), !1) : ($("#changemultiplestatusmodel").modal("toggle"), !1) }), jQuery(document).on("click", ".btnclosemultipletask", function () { var e = $(this).data("statusid"), t = []; return $(".selticket:checked").each(function () { t.push($(this).val()) }), $.ajax({ url: "/tickets/Closemultiplestatus/", data: { statustype: 1, statusid: e, ticketitems: t }, type: "POST" }).done(function (e) { if (e.error) { var t = $("#error-notification-template").html(), s = Handlebars.compile(t)(e); return $("#modelassignuseradmindiv").prepend(s), !1 } return new PNotify({ title: "Success", text: e.successtext, type: "success" }), !1 }), $.each(t, function (t, s) { var a = $("tr#" + s); a.animate({ backgroundColor: "yellow" }, 1e3).fadeOut(1e3, function () { a.remove() }); var i = $("#currentstatus").val(), r = $("#" + e + ".conversationstatus").text(); r = parseInt(r), r += 1, $("#" + e + ".conversationstatus").text(r); var n = $("#" + i + ".conversationstatus").text(); n = parseInt(n), n -= 1, $("#" + i + ".conversationstatus").text(n) }), $(".checkall").prop("checked", !1), $("#changemultiplestatusmodel").modal("toggle"), !1 }), jQuery(".assignedusersinput").on("beforeItemAdd", function (e) { var t = e.item; $.ajax({ url: "/tickets/PrefetchSingleTeams?UserID=" + t.value, type: "GET" }).done(function (e) { return e.error ? (alert(JSON.stringify(e.errortext)), !1) : (jQuery(".assignedteaminput").tagsinput("add", { value: e.teamid, text: e.teamName }), !1) }) }), jQuery(".assignedusersinput").on("beforeItemRemove", function (e) { var t = e.item, s = jQuery("#AssignmentDialogTicketId").val(); e.options && e.options.preventPost || jQuery.post("/Tickets/RemoveTicketUser", { id: s, userid: t.value }, function (e) { return e.success || jQuery(".assignedusersinput").tagsinput("add", t, { preventPost: !0 }), e.success && new PNotify({ title: "Success!", text: e.messagetext, type: "success" }), !0 }) }), jQuery(".assignedteaminput").on("beforeItemRemove", function (e) { var t = e.item, s = jQuery("#AssignmentDialogTicketId").val(); e.options && e.options.preventPost || jQuery.post("/Tickets/RemoveTicketteam", { id: s, teamid: t.value }, function (e) { e.success || jQuery(".assignedteaminput").tagsinput("add", t, { preventPost: !0 }), e.success && new PNotify({ title: "Success!", text: e.messagetext, type: "success" }) }) }), jQuery(document).on("click", ".teammember", function () { if (this.checked) { event.item; $.ajax({ url: "/tickets/PrefetchSingleTeams?UserID=" + $(this).data("userid"), type: "GET" }).done(function (e) { return e.error ? (alert(JSON.stringify(e.errortext)), !1) : ($(".shiftteammember").each(function (t, s) { $(s).data("teamid") == e.teamid && $(s).prop("checked", !0) }), !1) }) } }), jQuery(document).on("click", ".teamitem", function () { var e = jQuery(this).closest("tr").attr("id"), t = jQuery(this).data("teamid"), s = jQuery(this), a = jQuery(this).attr("name"); $.ajax({ url: "/tickets/UpdateTicketTeam?TicketId=" + e + "&TeamId=" + t, type: "GET" }).done(function (e) { return e.error ? (e.flag, new PNotify({ title: "Error", text: e.errortext, type: "error" }), !1) : (new PNotify({ title: "Success", text: "The task has been assigned to selected team.", type: "success", hide: !0 }), jQuery(s).closest(".ticketstatusaction").html('<button type="button" class="btn bg-success-700" data-teamname=' + a + " data-teamid=" + t + ">" + a + "</button>"), !1) }) }) }), jQuery(document).ready(function () { function e() { var e, t; (e = new Bloodhound({ datumTokenizer: Bloodhound.tokenizers.obj.whitespace("text"), queryTokenizer: Bloodhound.tokenizers.whitespace, limit: 10, prefetch: { url: "/tickets/PrefetchUsers", prepare: function (e) { return a, e.type = "POST", e.contentType = "application/json; charset=UTF-8", e }, remote: function (e, t) { return t.type = "POST", t.data = { q: e, foo: "bar" }, t } } })).initialize(), elt = $(".assignedusers"), elt.tagsinput({ itemValue: "value", itemText: "text" }), elt.tagsinput("input").typeahead(null, { name: "assignedusers", valueKey: "value", displayKey: "text", source: e.ttAdapter(), templates: "<p>{{text}}</p>" }).bind("typeahead:selected", $.proxy(function (e, t) { this.tagsinput("add", t), this.tagsinput("input").typeahead("val", "") }, elt)), (t = new Bloodhound({ datumTokenizer: Bloodhound.tokenizers.obj.whitespace("text"), queryTokenizer: Bloodhound.tokenizers.whitespace, limit: 10, prefetch: { url: "/tickets/PrefetchTeams", prepare: function (e) { return e.type = "POST", e.contentType = "application/json; charset=UTF-8", e }, remote: function (e, t) { return t.type = "POST", t.data = { q: e, foo: "bar" }, t } } })).initialize(), elt = $(".assignedteams"), elt.tagsinput({ itemValue: "value", itemText: "text" }), elt.tagsinput("input").typeahead(null, { name: "assignedteams", valueKey: "value", displayKey: "text", source: t.ttAdapter(), templates: "<p>{{text}}</p>" }).bind("typeahead:selected", $.proxy(function (e, t) { this.tagsinput("add", t), this.tagsinput("input").typeahead("val", "") }, elt)) } jQuery(document).on("click", ".previewticketdetail", function () { var e = $(this).data("id"); $("#firstticketid").val(e), $("#ticketMergeModal").modal("show") }), jQuery(document).on("click", "#searchmergabletickets", function () { var e = $(".subjectforsearch").val().trim(); $.ajax({ url: "/Tickets/Searchbysubject", type: "Get", data: { subject: e, criteria: "subject" }, cache: !1, async: !0, success: function (e) { document.getElementById("ticketstomerge").innerHTML = e.Tickets } }) }), jQuery(document).on("click", "#Mergeticket", function () { var e = $("#firstticketid").val(), t = []; $("input[name='selectformerge']:checked").each(function () { var e = $(this).val(); t.push(e) }), t.length <= 0 ? swal({ title: "Please select any ticket to merge !", confirmButtonColor: "#2196F3" }) : swal({ title: "Are you sure?", text: "You will not be able to recover this this Ticket!", type: "warning", showCancelButton: !0, confirmButtonColor: "#EF5350", confirmButtonText: "Yes, Merge it!", cancelButtonText: "No, cancel pls!", closeOnConfirm: !1, closeOnCancel: !1 }, function (s) { s ? $.ajax({ url: "/Tickets/MergeMultipleTickets", type: "Post", data: { firstticketid: e, selectedtickets: t }, cache: !1, async: !0, success: function (e) { e.error ? swal({ title: "Error", text: e.Message, confirmButtonColor: "#2196F3", type: "error" }) : (swal({ title: "Merge!", text: "Your ticket is successfully merged", confirmButtonColor: "#66BB6A", type: "success" }), s && ($("#ticketMergeModal").modal("hide"), $(".subjectforsearch").val(""), $("#ticketstomerge").html(""))) } }) : swal({ title: "Cancelled", text: "Your tickect is not merged :)", confirmButtonColor: "#2196F3", type: "error" }) }) }), jQuery(document).on("click", ".add-fav-ticket", function () { var e = $(this), t = e.closest("td").data("ticketid"); e.removeClass("add-fav-ticket").removeClass("fa-star-o").addClass("fa-star").addClass("remove-fav-ticket"), $.ajax({ url: "/Tickets/AddFavouriteTickets", type: "Post", data: { ticketid: t }, success: function (t) { 1 == t.success ? new PNotify({ title: "Success", text: "Ticket flag successfully added ", type: "success" }) : (new PNotify({ title: "Success", text: "Error occour! ticket flag is not added", type: "error" }), e.removeClass("remove-fav-ticket").removeClass("fa-star").addClass("fa-star-o").addClass("add-fav-ticket")) } }) }), jQuery(document).on("click", ".remove-fav-ticket", function () { var e = $(this), t = e.closest("td").data("ticketid"); e.removeClass("remove-fav-ticket").removeClass("fa-star").addClass("fa-star-o").addClass("add-fav-ticket"), $.ajax({ url: "/Tickets/RemoveFavouriteTickets", type: "Post", data: { ticketid: t }, success: function (t) { 1 == t.success ? new PNotify({ title: "Success", text: "Ticket flag removed successfully ", type: "success" }) : (new PNotify({ title: "Error", text: "Error Occour! flag is not remove try again", type: "error" }), e.removeClass("add-fav-ticket").removeClass("fa-star-o").addClass("fa-star").addClass("remove-fav-ticket")) } }) }), jQuery(document).on("click", "#closeMergeButton", function () { $(".subjectforsearch").val(""), $("#ticketstomerge").html("") }), $(document).on("click", ".add-new-skill", function () { $("#skillname").val(""), $("#AddSkillModal").modal("toggle") }), $(document).on("click", ".add-new-project", function () { jQuery("#clientid").select2(), $("#AddProjectModal").modal("toggle") }), $("#AddProjectModal").on("hidden.bs.modal", function () { $(this).find("#projectname").val(""), $(this).find("textarea,select").val("").end() }), jQuery(document).on("click", ".add-project", function () { var e = $("#clientid").val(), t = $("#projectname").val(); return null == e || "" == e ? (sweetAlert("Sorry", "Please select a client from the list.", "error"), !1) : null == t || "" == t ? (sweetAlert("Sorry", "Please add the project name.", "error"), !1) : void $.ajax({ url: "/home/AddProject/", data: { clientid: e, projectname: t }, type: "POST" }).done(function (e) { if (e.error) return alert(e.message), !1; $("#ticketprojectid").append($("<option>", { value: e.prid, text: e.prname })), new PNotify({ title: "Success", text: "The project has been successfully added.", type: "success" }), jQuery("#AddProjectModal").modal("hide") }) }), jQuery(document).on("click", ".add-skill", function () { var e = $("#skillname").val(); if ("" == e || null == e) return sweetAlert("Sorry", "Please add the skill name.", "error"), !1; $.ajax({ url: "/home/AddSkill/", data: { name: e }, type: "POST" }).done(function (e) { if (e.error) return alert(e.message), !1; $("#ticketskillid").append($("<option>", { value: e.skid, text: e.skname })), new PNotify({ title: "Success", text: "The skill has been added successfully.", type: "success" }), jQuery("#AddSkillModal").modal("hide") }) }), jQuery(document).on("click", ".mergemultitask", function () { $("input.selticket:checkbox:checked").each(function () { var e = $(this).val(), t = $(this).closest("tr").find(".ticketdetail").html(); t = '<tr id="' + e + '"><td style="width:5px;"><input type="radio" name="selradio" class="mergeinto" value="' + e + '" /></td><td style="width:5px;"><input type="checkbox" class="mergeto" value="' + e + '" /></td><td class="merge-table">' + t + "</td></tr>", $("#tasktomerge").append(t) }), $("#ticketglobalMergeModal").modal("show") }), jQuery(document).on("click", ".mergeinto", function () { $(".mergeto").attr("disabled", !1).attr("checked", !1), $(this).closest("tr").find("input.mergeto").attr("disabled", !0) }), jQuery(document).on("click", ".merge_global_ticket", function () { var e = $("input[name=selradio]:checked").val(), t = []; $("input.mergeto:checkbox:checked").each(function () { var e = $(this).val(); t.push(e) }), t.length <= 0 ? swal({ title: "Please select any ticket to merge !", confirmButtonColor: "#2196F3" }) : swal({ title: "Are you sure?", text: "You will not be able to recover this this Ticket!", type: "warning", showCancelButton: !0, confirmButtonColor: "#EF5350", confirmButtonText: "Yes, Merge it!", cancelButtonText: "No, cancel pls!", closeOnConfirm: !1, closeOnCancel: !1 }, function (s) { s ? $.ajax({ url: "/Tickets/MergeMultipleTickets", type: "Post", data: { firstticketid: e, selectedtickets: t }, cache: !1, async: !0, success: function (e) { if (!e.error) { if (swal({ title: "Merge!", text: "Your ticket is successfully merged", confirmButtonColor: "#66BB6A", type: "success" }), s) { if ($(".selticket").prop("checked", !1), $("#ticketglobalMergeModal").modal("hide"), e.fails > 0) { var t, a = e.message.split("-"), i = e.tickets.split("-"); for (let s = 0; s < e.fails; s++)t = t + "<tr><td>" + i[s] + "</td><td>" + a[s] + "</td></tr>"; $("#errorstatus").append(t), $("#status").modal("show") } if ("" != e.successfullmergeids && null != e.successfullmergeids) { var r = e.successfullmergeids.split("-"); for (let e = 0; e < r.length; e++)$("#" + r[e]).remove() } } return !1 } swal({ title: "Error", text: e.Message, confirmButtonColor: "#2196F3", type: "error" }) } }) : swal({ title: "Cancelled", text: "Your tickect is not merged :)", confirmButtonColor: "#2196F3", type: "error" }) }) }), $("#ticketglobalMergeModal").on("hidden.bs.modal", function () { $("#tasktomerge").html("") }), jQuery(document).on("click", ".multiassign", function () { return 0 == $(".selticket:checked").length ? (new PNotify({ title: "Warning!", text: "Please select at least one ticket for assignment!", type: "warning" }), !1) : ($("#btnassignticket").removeClass("saveticketassignment").addClass("assignmultitickets"), e(), $("#assignuseradmin").modal("toggle"), !1) }), jQuery(".assignedusers").on("beforeItemAdd", function (e) { var t = e.item; $.ajax({ url: "/tickets/PrefetchSingleTeams?UserID=" + t.value, type: "GET" }).done(function (e) { return e.error ? (alert(JSON.stringify(e.errortext)), !1) : (jQuery(".assignedteams").tagsinput("add", { value: e.teamid, text: e.teamName }), !1) }) }), jQuery(".assignedusers").on("beforeItemRemove", function (e) { var t = e.item, s = jQuery("#AssignmentDialogTicketId").val(); e.options && e.options.preventPost || jQuery.post("/Tickets/RemoveTicketUser", { id: s, userid: t.value }, function (e) { return e.success || jQuery(".assignedusersinput").tagsinput("add", t, { preventPost: !0 }), e.success && new PNotify({ title: "Success!", text: e.messagetext, type: "success" }), !0 }) }), jQuery(".assignedteams").on("beforeItemRemove", function (e) { var t = e.item, s = jQuery("#AssignmentDialogTicketId").val(); e.options && e.options.preventPost || jQuery.post("/Tickets/RemoveTicketteam", { id: s, teamid: t.value }, function (e) { e.success || jQuery(".assignedteaminput").tagsinput("add", t, { preventPost: !0 }), e.success && new PNotify({ title: "Success!", text: e.messagetext, type: "success" }) }) }) });