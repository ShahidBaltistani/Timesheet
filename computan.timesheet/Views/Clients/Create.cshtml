@model computan.timesheet.core.Client
@{ ViewBag.Title = "Add Client"; }
<div class="panel panel-default" id="maincontent">
    @Html.Partial("_NavTabs", "clients")
    <div class="panel">
        <div class="panel-heading bg-teal-700">
            <div class="row">
                <div class="col-xs-12">
                    <div class="col-xs-12 col-sm-7">
                        <h4 class="panel-title ticket-title">
                            <span>Add New Client </span>
                        </h4>
                    </div>
                    <div class="col-xs-12 col-sm-5">
                        <div class="heading-elements">
                            <ul class="icons-list">
                                <li>
                                    <button class="label border-left-primary label-striped" onclick="window.location.href = '/clients/index'">List Clients</button>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="panel-body">
            @using (Html.BeginForm("create", "clients", FormMethod.Post, new {Class = "clientfrom"}))
            {
                @Html.AntiForgeryToken()
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.name, new {@class = "control-label"})
                            @Html.EditorFor(model => model.name, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.name, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.parentid, new {@class = "control-label"})
                            @if (ViewBag.hasparent == true)
                            {
                                @Html.DropDownListFor(model => model.parentid, (IEnumerable<SelectListItem>) ViewBag.parentlist, "Please Select", new {@class = "form-control", disabled = "disabled"})
                                <input type="hidden" id="parentid" name="parentid" value="@ViewBag.parentid"/>
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.parentid, (IEnumerable<SelectListItem>) ViewBag.parentlist, "Please Select", new {@class = "form-control"})
                            }
                            @Html.ValidationMessageFor(model => model.parentid, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.clienttypeid, new {@class = "control-label"})
                            @Html.DropDownListFor(model => model.clienttypeid, ViewBag.clienttypes as SelectList, "Please Select", new {@class = "form-control"})
                            @Html.ValidationMessageFor(model => model.clienttypeid, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.accountmanager, new {@class = "control-label"})
                            @Html.DropDownListFor(model => model.accountmanager, ViewBag.users as SelectList, "Please Select", new {@class = "form-control"})
                            @Html.ValidationMessageFor(model => model.accountmanager, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.customersourceid, new {@class = "control-label"})
                            @Html.DropDownListFor(model => model.customersourceid, ViewBag.customersources as SelectList, "Please Select", new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.customersourceid, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.email, new {@class = "control-label"})
                            @Html.EditorFor(model => model.email, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.email, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.maxbillablehours, new {@class = "control-label"})
                            @Html.EditorFor(model => model.maxbillablehours, new {htmlAttributes = new {@class = "form-control", type = "number"}})
                            @Html.ValidationMessageFor(model => model.maxbillablehours, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.website, new {@class = "control-label"})
                            @Html.EditorFor(model => model.website, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.website, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.address, new {@class = "control-label"})
                            @Html.EditorFor(model => model.address, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.address, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.warningtext, new {@class = "control-label"})
                            @Html.EditorFor(model => model.warningtext, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.warningtext, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.city, new {@class = "control-label"})
                            @Html.EditorFor(model => model.city, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.city, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.stateid, new {@class = "control-label"})
                            @Html.DropDownListFor(model => model.stateid, ViewBag.statelist as SelectList, "Please Select", new {@class = "form-control"})
                            @Html.ValidationMessageFor(model => model.stateid, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.countryid, new {@class = "control-label"})
                            @Html.DropDownListFor(model => model.countryid, ViewBag.countrylist as SelectList, "Please Select", new {@class = "form-control"})
                            @Html.ValidationMessageFor(model => model.countryid, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.zip, new {@class = "control-label"})
                            @Html.EditorFor(model => model.zip, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.zip, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.phone, new {@class = "control-label"})
                            @Html.EditorFor(model => model.phone, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.phone, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.mobile, new {@class = "control-label"})
                            @Html.EditorFor(model => model.mobile, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.mobile, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.pmplateformlink, new {@class = "control-label"})
                            @Html.EditorFor(model => model.pmplateformlink, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.pmplateformlink, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-1" for="isactive">Status</label>
                        <div class="col-md-1">
                            <div class="checkbox">
                                @Html.CheckBoxFor(model => model.isactive, new {@checked = true})
                                @Html.LabelFor(m => m.isactive, "Active", new {@class = "lbl-active label label-success", style = "margin-left: 18px; padding-left: 4px;"})
                                @Html.LabelFor(m => m.isactive, "In-Active", new {@class = "lbl-deactive label label-danger", style = "margin-left: 18px; padding-left: 4px;"})
                                @Html.ValidationMessageFor(model => model.isactive, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <label class="control-label col-md-1" for="iswarning">Warning</label>
                        <div class="col-md-1">
                            <div class="checkbox" data-toggle="tooltip" title="Show warning for insert time in the client PM tool">
                                @Html.CheckBoxFor(model => model.iswarning)
                                @Html.ValidationMessageFor(model => model.iswarning, "", new {@class = "text-danger"})
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-12 text-center">
                            <input type="submit" value="Add" class="btn btn-primary"/>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/select2")
}

<script type="text/javascript">
    $(document).ready(function() {
        $("#stateid").select2();
        $("#countryid").select2();
        $("#customersourceid").select2();
        $("#accountmanager").select2();
        $("#parentid").select2();
        $("#clienttypeid").select2();
        jQuery.validator.unobtrusive.parse();
        jQuery.validator.unobtrusive.parse(".clientfrom");
        ChangeStatus();
        $("#isactive").change(function() {
            ChangeStatus();
        });

        function ChangeStatus() {
            if ($("#isactive").is(':checked')) {
                $(".lbl-active").show();
                $(".lbl-deactive").hide();
            } else {
                $(".lbl-active").hide();
                $(".lbl-deactive").show();
            }
        }
    });
</script>