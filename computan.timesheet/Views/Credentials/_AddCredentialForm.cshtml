@model computan.timesheet.core.Credentials
@using (Html.BeginForm("create", "credentials", FormMethod.Post, new {id = "addcredentials", enctype = "multipart/form-data"}))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        @if (ViewBag.IsProjectCredentials == true)
        {
            <input type="hidden" value="true" id="ispro" name="ispro"/>
        }
        else
        {
            <input type="hidden" value="false" id="ispro" name="ispro"/>
        }
        <div class="form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.title, new {@class = "control-label"})
                @Html.EditorFor(model => model.title, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.title, "", new {@class = "text-danger"})
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.url, new {@class = "control-label"})
                @Html.EditorFor(model => model.url, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.url, "", new {@class = "text-danger"})
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.linkedCredential, new {@class = "control-label"})
                @Html.EditorFor(model => model.linkedCredential, ViewBag.Readonly ? (object) new {htmlAttributes = new {@class = "form-control"}} : new {htmlAttributes = new {@class = "form-control", disabled = "disabled"}})
                @Html.ValidationMessageFor(model => model.linkedCredential, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-6">
                @Html.LabelFor(model => model.username, "User Name*", new {@class = "control-label"})
                @Html.EditorFor(model => model.username, ViewBag.Readonly ? (object) new {htmlAttributes = new {@class = "form-control setdisable", disabled = "disabled"}} : new {htmlAttributes = new {@class = "form-control setdisable"}})
                @Html.ValidationMessageFor(model => model.username, "", new {@class = "text-danger"})
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.password, "Password*", new {@class = "control-label"})
                @Html.EditorFor(model => model.password, ViewBag.Readonly ? (object) new {htmlAttributes = new {@class = "form-control setdisable", disabled = "disabled"}} : new {htmlAttributes = new {@class = "form-control setdisable"}})
                @Html.ValidationMessageFor(model => model.password, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-3">
                @Html.LabelFor(model => model.credentialcategoryid, "Credential Category*", new {@class = "control-label"})
                @Html.DropDownList("credentialcategoryid", null, "Please Select", new {@class = "form-control"})
                @Html.ValidationMessageFor(model => model.credentialcategoryid, "", new {@class = "text-danger"})
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.crendentialtypeid, "Credential Type*", new {@class = "control-label"})
                @Html.DropDownList("crendentialtypeid", null, "Please Select", new {@class = "form-control"})
                @Html.ValidationMessageFor(model => model.crendentialtypeid, "", new {@class = "text-danger"})
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.credentiallevelid, "Credential Level*", new {@class = "control-label"})
                @Html.DropDownList("credentiallevelid", null, "Please Select", new {@class = "form-control"})
                @Html.ValidationMessageFor(model => model.credentiallevelid, "", new {@class = "text-danger"})
            </div>
            <div class="col-md-3" id="form-group-productid">
                @Html.LabelFor(model => model.projectid, new {@class = "control-label"})
                @Html.DropDownList("projectid", null, "Please Select", new {@class = "form-control"})
                @Html.ValidationMessageFor(model => model.projectid, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.port, new {@class = "control-label"})
                @Html.EditorFor(model => model.port, ViewBag.Readonly ? (object) new {htmlAttributes = new {@class = "form-control setdisable", disabled = "disabled"}} : new {htmlAttributes = new {@class = "form-control setdisable"}})
                @Html.ValidationMessageFor(model => model.port, "", new {@class = "text-danger"})
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.host, new {@class = "control-label"})
                @Html.EditorFor(model => model.host, ViewBag.Readonly ? (object) new {htmlAttributes = new {@class = "form-control setdisable", disabled = "disabled"}} : new {htmlAttributes = new {@class = "form-control setdisable"}})
                @Html.ValidationMessageFor(model => model.host, "", new {@class = "text-danger"})
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.networkdomain, new {@class = "control-label"})
                @Html.EditorFor(model => model.networkdomain, ViewBag.Readonly ? (object) new {htmlAttributes = new {@class = "form-control setdisable", disabled = "disabled"}} : new {htmlAttributes = new {@class = "form-control setdisable"}})
                @Html.ValidationMessageFor(model => model.networkdomain, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="row">
            <label class="control-label col-md-2">Crendential File</label>
            <div class="col-md-2">
                <input id="file" accept=".txt,.ppk,.pem" name="file" type="file" value="" class="file-input" data-show-remove="false" data-show-caption="false" data-show-upload="false">
            </div>
        </div>
        <div class="form-group">
            <span class="col-md-offset-1  col-md-11 help-block">You can upload file up to <code>100 KB</code> and only <code>.txt,.ppk & .pem</code> file types are allowed.</span>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.comments, new {@class = "control-label col-md-1"})
            <div class="col-md-11">
                @Html.TextAreaFor(model => model.comments, new {@class = "form-control", rows = "3", cols = "2"})
                @Html.ValidationMessageFor(model => model.comments, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12 text-center">
                <input type="submit" value="Create" class="btn btn-primary"/>
            </div>
        </div>
    </div>
}